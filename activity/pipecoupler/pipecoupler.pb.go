// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipecoupler.proto

package pipecoupler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Data struct {
	Sender               string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_1925fc21bdca7a28, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Data) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Data) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Reply struct {
	Sender               string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Status               bool     `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1925fc21bdca7a28, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Reply) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Reply) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Reply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*Data)(nil), "pipecoupler.Data")
	proto.RegisterType((*Reply)(nil), "pipecoupler.Reply")
}

func init() {
	proto.RegisterFile("pipecoupler.proto", fileDescriptor_1925fc21bdca7a28)
}

var fileDescriptor_1925fc21bdca7a28 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0xb1, 0x4e, 0x80, 0x30,
	0x14, 0x45, 0x2d, 0x22, 0xea, 0x23, 0x31, 0xd2, 0xc1, 0x34, 0x4e, 0x84, 0x89, 0xa9, 0x83, 0xc6,
	0x1f, 0xc0, 0x0e, 0xb0, 0x11, 0xfe, 0xa0, 0x94, 0x37, 0x90, 0x94, 0xbe, 0x06, 0xca, 0xe0, 0xdf,
	0x1b, 0x2a, 0x26, 0x38, 0x3b, 0xde, 0x33, 0x9c, 0xdc, 0x7b, 0xa1, 0xf0, 0xb3, 0x47, 0x43, 0xbb,
	0xb7, 0xb8, 0x4a, 0xbf, 0x52, 0x20, 0x9e, 0x5f, 0x50, 0xd5, 0x42, 0xaa, 0x74, 0xd0, 0xfc, 0x05,
	0xb2, 0x0d, 0xdd, 0x84, 0xab, 0x60, 0x25, 0xab, 0x1f, 0x87, 0x33, 0xf1, 0x27, 0x48, 0x3a, 0x25,
	0x92, 0xc8, 0x92, 0x4e, 0x71, 0x01, 0xf7, 0x86, 0x5c, 0x40, 0x17, 0xc4, 0x6d, 0x84, 0xbf, 0xb1,
	0xd2, 0x70, 0x37, 0xa0, 0xb7, 0x5f, 0xff, 0x57, 0x45, 0x43, 0xd0, 0x61, 0xdf, 0x44, 0x5a, 0xb2,
	0xfa, 0x61, 0x38, 0xd3, 0x9b, 0x82, 0xbc, 0x9f, 0x3d, 0x7e, 0xfe, 0x74, 0xe7, 0x1f, 0x00, 0xad,
	0x76, 0x93, 0xc5, 0xb8, 0xa0, 0x90, 0xd7, 0xa9, 0x07, 0x7a, 0xe5, 0x7f, 0x50, 0x6c, 0x57, 0xdd,
	0x34, 0x35, 0x70, 0x43, 0x8b, 0x0c, 0xf3, 0x68, 0x48, 0x2e, 0x34, 0xa1, 0x25, 0xbf, 0x35, 0xcf,
	0x17, 0x73, 0x7f, 0xfc, 0xd4, 0xb3, 0x31, 0x8b, 0x87, 0xbd, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xe6, 0x42, 0x58, 0x9f, 0x45, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PipeCouplerClient is the client API for PipeCoupler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipeCouplerClient interface {
	HandleData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Reply, error)
}

type pipeCouplerClient struct {
	cc grpc.ClientConnInterface
}

func NewPipeCouplerClient(cc grpc.ClientConnInterface) PipeCouplerClient {
	return &pipeCouplerClient{cc}
}

func (c *pipeCouplerClient) HandleData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pipecoupler.PipeCoupler/HandleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipeCouplerServer is the server API for PipeCoupler service.
type PipeCouplerServer interface {
	HandleData(context.Context, *Data) (*Reply, error)
}

// UnimplementedPipeCouplerServer can be embedded to have forward compatible implementations.
type UnimplementedPipeCouplerServer struct {
}

func (*UnimplementedPipeCouplerServer) HandleData(ctx context.Context, req *Data) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleData not implemented")
}

func RegisterPipeCouplerServer(s *grpc.Server, srv PipeCouplerServer) {
	s.RegisterService(&_PipeCoupler_serviceDesc, srv)
}

func _PipeCoupler_HandleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeCouplerServer).HandleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipecoupler.PipeCoupler/HandleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeCouplerServer).HandleData(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipeCoupler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pipecoupler.PipeCoupler",
	HandlerType: (*PipeCouplerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleData",
			Handler:    _PipeCoupler_HandleData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipecoupler.proto",
}
